TL;DR 
for correct rounding of floating point output showing 2 decimals, use...
printf("%.2f", doubleVariable + .0001); // causes n.nn4999999 which is the binary approximation of the base-10 n.nn5 value to round up to two decimal places as expected. e.g. binary equivalent of base-10 1.235 stored as 1.234999999... to print as 1.24   All other binary approximations will round as expected in base-10.

See below for binary rounding info. Issues flagged with "!".

sizeof(bool)  =           1 byte,   8 bits
sizeof(true)  =           4 bytes,  32 bits with value of 1
sizeof(false) =           4 bytes,  32 bits with value of 0
bool isNotZero;
isNotZero = 12345; // assign non-zero value integer to bool data type
if (isNotZero) is 1 or true
isNotZero = 0    ; // assign     zero value integer to bool data type
if (isNotZero) is 0 or false

sizeof(char)  =           1 bytes,  8 bits
CHAR_MAX      =        +127
CHAR_MIN      =        -128
SCHAR_MAX     =         127
UCHAR_MAX     =         255

sizeof(int)   =           4 bytes,  32 bits
INT_MAX       = +2147483647
INT_MAX + 1   = -2147483648  overflow
INT_MIN       = -2147483648
INT_MIN - 1   = +2147483647  overflow

sizeof(unsigned int) =    4 bytes,  32 bits
UINT_MAX      =  4294967295
UINT_MAX + 1  =           0  overflow

sizeof(short) =           2 bytes,  16 bits
SHRT_MAX      =      +32767
SHRT_MIN      =      -32768

sizeof(long)  =           4 bytes,  32 bits
LONG_MAX      = +2147483647
LONG_MIN      = -2147483648

sizeof(long long)  = 8 bytes, 64 bits
LLONG_MAX          = +9223372036854775807
LLONG_MIN          = -9223372036854775808

int is preferred when the maximum value the variable must hold
will ALWAYS fit within the range of a 2 byte, 16-bit
signed integer, a short, the minimum int size in C.
e.g. counting from 1 to 30000, arrays with <16,000 elements.
This will cover the vast majority of use cases.

C99 guarantees variables to be a particular size across platforms:
~ in general use, declare int##_t where ## is bit width: 8, 16, 32, 64
~ for performance, use int_FAST##_t where ## is bit width: 8, 16, 32, 64
~ for memory conservation over performance, use int_LEAST##_t
  when allocating a great many variables on a memory constrained system.

sizeof(float)  = 4 bytes, 24 significant bits
significant digits accuracy = min. 6 positions of whole + fractional parts. i.e. the number of base-10 digits that can be represented without change after rounding.
e.g. 0.123456 or 123456.0 or 123.456
maximum value    = 16777216  or 2^24
maximum          = 16777216.000000000000  whole values added to max are rounded
plus 1.000000000 = 16777216.000000000000  !!! addend rounded to 0 (binary side effect)
plus 1.000000000 = 16777216.000000000000  !!! addend rounded to 0 (binary side effect)
plus 1.000000000 = 16777216.000000000000  !!! addend rounded to 0 (binary side effect)
plus 1.000000000 = 16777216.000000000000  !!! addend rounded to 0 (binary side effect)
plus 1.000000000 = 16777216.000000000000  !!! addend rounded to 0 (binary side effect)
plus 1.111111111 = 16777218.000000000000  !!! addend rounded to 2 (binary side effect)
plus 1.111111111 = 16777220.000000000000  !!! addend rounded to 2 (binary side effect)
plus 1.111111111 = 16777222.000000000000  !!! addend rounded to 2 (binary side effect)
plus 1.111111111 = 16777224.000000000000  !!! addend rounded to 2 (binary side effect)
plus 1.111111111 = 16777226.000000000000  !!! addend rounded to 2 (binary side effect)
maximum * .1     = 1677721.625000000000  values vary by 0.125 or 1/8, not by .100 when at max accuracy
sub  1.111111111 = 1677720.500000000000
sub  1.111111111 = 1677719.375000000000
sub  1.111111111 = 1677718.250000000000
sub  1.111111111 = 1677717.125000000000
sub  1.111111111 = 1677716.000000000000
plus 1.111111111 = 1677717.125000000000
plus 1.111111111 = 1677718.250000000000
plus 1.111111111 = 1677719.375000000000
plus 1.111111111 = 1677720.500000000000
plus 1.111111111 = 1677721.625000000000
plus 1.111111111 = 1677722.750000000000
plus 1.111111111 = 1677723.875000000000
plus 1.111111111 = 1677725.000000000000
plus 1.111111111 = 1677726.125000000000
plus 1.111111111 = 1677727.250000000000

sizeof(double) = 8 bytes, 53 significant bits
maximum value  = 2^53 = 9007199254740992
significant digits accuracy = 15 regardless of decimal point's position (similar to float)

doubles with multiple calcs may result in some values drifting or becoming less accurate.

double   1 is 1.00000000000000000000
              -.----+----1----+-????
double  /3 is 0.33333333333333331483
double  /3 is 0.11111111111111110494
double  /3 is 0.03703703703703703498
double  /3 is 0.01234567901234567833
double  /3 is 0.00411522633744855915
double  /3 is 0.00137174211248285312
double  /3 is 0.00045724737082761773
double  /3 is 0.00015241579027587258
double  /3 is 0.00005080526342529086
double  /3 is 0.00001693508780843029

double 1.0000 is    1.00000000000000000000
                    -.----+----1----+-????
double*2.0625 is    2.06250000000000000000
double*2.0625 is    4.25390625000000000000
double*2.0625 is    8.77368164062500000000
double*2.0625 is   18.09571838378906250000
double*2.0625 is   37.32241916656494140625  accurate: decimal converts exactly to binary
double*2.0625 is   76.97748953104019165039  !! loss of precision hereafter
double*2.0625 is  158.76607215777039527893
double*2.0625 is  327.45502382540144026279
double*2.0625 is  675.37598663989047054201
double*2.0625 is 1392.96297244477409549290

double .3 is 0.33333333333333331483
             -.----+----1----+-????
double += is 0.66666666666666662966  accurate to 16 decimals
double += is 1.00000000000000000000  rounded up
double += is 1.33333333333333325932  accurate to 15 decimals
double += is 1.66666666666666651864  "
double += is 1.99999999999999977796  "
double += is 2.33333333333333303727  "
double += is 2.66666666666666651864  "
double += is 3.00000000000000000000  " rounded up
double += is 3.33333333333333348136  "
double += is 3.66666666666666696273  "
double += is 4.00000000000000000000  " rounded up
double += is 4.33333333333333303727  "
double += is 4.66666666666666607455  "
double += is 4.99999999999999911182  "
double += is 5.33333333333333214910  "
double += is 5.66666666666666518637  "
double += is 5.99999999999999822364  "
double += is 6.33333333333333126092  "
double += is 6.66666666666666429819  "
double += is 6.99999999999999733546  "

double         is 0.12345678901234567737 after assignment of 0.12345678901234567890
                  -.----+----1----+-????  accurate to 16 decimals
double *= 10.0 is 1.23456789012345669043  accurate to 15 decimals
double *= 10.0 is 12.34567890123456734841  accurate to 14 or 15? decimals
double *= 10.0 is 123.45678901234566637868  accurate to 13 decimals
double *= 10.0 is 1234.56789012345666378678  accurate to 12 decimals
double *= 10.0 is 12345.67890123456709261518  accurate to 12 decimals
double *= 10.0 is 123456.78901234567456413060  accurate to 11 decimals
double *= 10.0 is 1234567.89012345671653747559  accurate to 10 decimals
double *= 10.0 is 12345678.90123456716537475586  accurate to 9 decimals
double *= 10.0 is 123456789.01234567165374755859  accurate to 8 decimals
double *= 10.0 is 1234567890.12345671653747558594  accurate to 7 decimals
double *= 10.0 is 12345678901.23456764221191406250  accurate to 6 decimals
double *= 10.0 is 123456789012.34567260742187500000  accurate to 5 decimals
double *= 10.0 is 1234567890123.45678710937500000000  accurate to 4 or 5? decimals
double *= 10.0 is 12345678901234.56835937500000000000  accurate to 2 decimals
double *= 10.0 is 123456789012345.68750000000000000000  accurate to 1 decimals
double *= 10.0 is 1234567890123457.00000000000000000000  accurate to 0 decimals
double *= 10.0 is 12345678901234570.00000000000000000000
double *= 10.0 is 123456789012345696.00000000000000000000
double *= 10.0 is 1234567890123457024.00000000000000000000
double *= 10.0 is 12345678901234569216.00000000000000000000

rounding to 2 decimals is platform/compiler dependent
See https://www.exploringbinary.com/inconsistent-rounding-of-printed-floating-point-numbers/
and https://floating-point-gui.de/
the following rounding methods work because 0.375 is represented exactly in binary
Binary approx of decimal        %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
0.37500000000000000000          0.38    0.38    0.38    0.38009999999999999343
0.75000000000000000000          0.75    0.75    0.75    0.75509999999999999343
1.12500000000000000000          1.13    1.13    1.13    1.13010000000000010445
1.50000000000000000000          1.50    1.50    1.50    1.50510000000000010445
1.87500000000000000000          1.88    1.88    1.88    1.88010000000000010445
2.25000000000000000000          2.25    2.25    2.25    2.25510000000000010445
2.62500000000000000000          2.63    2.63    2.63    2.63010000000000010445
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.37500000000000000000          3.38    3.38    3.38    3.38010000000000010445
3.75000000000000000000          3.75    3.75    3.75    3.75510000000000010445
4.12500000000000000000          4.13    4.13    4.13    4.13009999999999966036
4.50000000000000000000          4.50    4.50    4.50    4.50509999999999966036
4.87500000000000000000          4.88    4.88    4.88    4.88009999999999966036
5.25000000000000000000          5.25    5.25    5.25    5.25509999999999966036
5.62500000000000000000          5.63    5.63    5.63    5.63009999999999966036
6.00000000000000000000          6.00    6.00    6.00    6.00509999999999966036
6.37500000000000000000          6.38    6.38    6.38    6.38009999999999966036
6.75000000000000000000          6.75    6.75    6.75    6.75509999999999966036
7.12500000000000000000          7.13    7.13    7.13    7.13009999999999966036
7.50000000000000000000          7.50    7.50    7.50    7.50509999999999966036
7.87500000000000000000          7.88    7.88    7.88    7.88009999999999966036
8.25000000000000000000          8.25    8.25    8.25    8.25510000000000054854
8.62500000000000000000          8.63    8.63    8.63    8.63010000000000054854
9.00000000000000000000          9.00    9.00    9.00    9.00510000000000054854
9.37500000000000000000          9.38    9.38    9.38    9.38010000000000054854
9.75000000000000000000          9.75    9.75    9.75    9.75510000000000054854

printf rounding does not always work because +0.251 is not always exact in binary
when printing, nudge by +.0001 when rounding to 2 decimal (or -.0001 for negatives).
printf("%.20f\t\t%.2f\t%.2f\t%.2f\t%.20f\n", dblTest, dblTest, dblTest + .0001, trunc((dblTest + .0051) * 100) * .01, dblTest + .0051);
This prevents the problematic half-way value n.nn49999 which is a close as binary gets to n.nn5.
Binary approx of decimal        %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
1.00000000000000000000          1.00    1.00    1.00    1.00510000000000010445
1.25099999999999988987          1.25    1.25    1.25    1.25609999999999999432
1.50199999999999977973          1.50    1.50    1.50    1.50709999999999988418
1.75299999999999966960          1.75    1.75    1.75    1.75809999999999977405
2.00399999999999955946          2.00    2.00    2.00    2.00909999999999966391
2.25499999999999944933         !2.25!   2.26    2.26    2.26009999999999955378
2.50599999999999933920          2.51    2.51    2.51    2.51109999999999944365
2.75699999999999922906          2.76    2.76    2.76    2.76209999999999933351
3.00799999999999911893          3.01    3.01    3.01    3.01309999999999922338
3.25899999999999900879          3.26    3.26    3.26    3.26409999999999911324
3.50999999999999889866          3.51    3.51    3.51    3.51509999999999900311
3.76099999999999878852          3.76    3.76    3.76    3.76609999999999889297
4.01199999999999867839          4.01    4.01    4.01    4.01709999999999833875
4.26299999999999901235          4.26    4.26    4.26    4.26809999999999867271
4.51399999999999934630          4.51    4.51    4.51    4.51909999999999900666
4.76499999999999968026         !4.76!   4.77    4.77    4.77009999999999934062
5.01600000000000001421          5.02    5.02    5.02    5.02109999999999967457
5.26700000000000034817          5.27    5.27    5.27    5.27210000000000000853
5.51800000000000068212          5.52    5.52    5.52    5.52310000000000034248
5.76900000000000101608          5.77    5.77    5.77    5.77410000000000067644
6.02000000000000135003          6.02    6.02    6.02    6.02510000000000101039
6.27100000000000168399          6.27    6.27    6.27    6.27610000000000134435
6.52200000000000201794          6.52    6.52    6.52    6.52710000000000167830
6.77300000000000235190          6.77    6.77    6.77    6.77810000000000201226
7.02400000000000268585          7.02    7.02    7.02    7.02910000000000234621

add 0.01 works, binary is close enough, rounding to .nn works in all cases
Binary approx of decimal        %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
2.00000000000000000000          2.00    2.00    2.00    2.00510000000000010445
2.00999999999999978684          2.01    2.01    2.01    2.01509999999999989129
2.01999999999999957367          2.02    2.02    2.02    2.02509999999999967812
2.02999999999999936051          2.03    2.03    2.03    2.03509999999999946496
2.03999999999999914735          2.04    2.04    2.04    2.04509999999999925180
2.04999999999999893419          2.05    2.05    2.05    2.05509999999999903864
2.05999999999999872102          2.06    2.06    2.06    2.06509999999999882547
2.06999999999999850786          2.07    2.07    2.07    2.07509999999999861231
2.07999999999999829470          2.08    2.08    2.08    2.08509999999999839915
2.08999999999999808153          2.09    2.09    2.09    2.09509999999999818598
2.09999999999999786837          2.10    2.10    2.10    2.10509999999999797282
2.10999999999999765521          2.11    2.11    2.11    2.11509999999999775966
2.11999999999999744205          2.12    2.12    2.12    2.12509999999999754650
2.12999999999999722888          2.13    2.13    2.13    2.13509999999999733333
2.13999999999999701572          2.14    2.14    2.14    2.14509999999999712017
2.14999999999999680256          2.15    2.15    2.15    2.15509999999999690701
2.15999999999999658939          2.16    2.16    2.16    2.16509999999999669384
2.16999999999999637623          2.17    2.17    2.17    2.17509999999999648068
2.17999999999999616307          2.18    2.18    2.18    2.18509999999999626752
2.18999999999999594991          2.19    2.19    2.19    2.19509999999999605436
2.19999999999999573674          2.20    2.20    2.20    2.20509999999999584119
2.20999999999999552358          2.21    2.21    2.21    2.21509999999999562803
2.21999999999999531042          2.22    2.22    2.22    2.22509999999999541487
2.22999999999999509726          2.23    2.23    2.23    2.23509999999999520170
2.23999999999999488409          2.24    2.24    2.24    2.24509999999999498854

add 0.00n does not work as expected for the problematic half-way value n.nn49999
Binary of +=0.001 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00099999999999988987          3.00    3.00    3.00    3.00609999999999999432
3.00199999999999977973          3.00    3.00    3.00    3.00709999999999988418
3.00299999999999966960          3.00    3.00    3.00    3.00809999999999977405
3.00399999999999955946          3.00    3.00    3.00    3.00909999999999966391
3.00499999999999944933         !3.00!   3.01    3.01    3.01009999999999955378
3.00599999999999933920          3.01    3.01    3.01    3.01109999999999944365
3.00699999999999922906          3.01    3.01    3.01    3.01209999999999933351
3.00799999999999911893          3.01    3.01    3.01    3.01309999999999922338
3.00899999999999900879          3.01    3.01    3.01    3.01409999999999911324
3.00999999999999889866          3.01    3.01    3.01    3.01509999999999900311
3.01099999999999878852          3.01    3.01    3.01    3.01609999999999889297
Binary of +=0.002 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00199999999999977973          3.00    3.00    3.00    3.00709999999999988418
3.00399999999999955946          3.00    3.00    3.00    3.00909999999999966391
3.00599999999999933920          3.01    3.01    3.01    3.01109999999999944365
3.00799999999999911893          3.01    3.01    3.01    3.01309999999999922338
3.00999999999999889866          3.01    3.01    3.01    3.01509999999999900311
3.01199999999999867839          3.01    3.01    3.01    3.01709999999999878284
3.01399999999999845812          3.01    3.01    3.01    3.01909999999999856257
3.01599999999999823785          3.02    3.02    3.02    3.02109999999999834230
3.01799999999999801759          3.02    3.02    3.02    3.02309999999999812204
3.01999999999999779732          3.02    3.02    3.02    3.02509999999999790177
3.02199999999999757705          3.02    3.02    3.02    3.02709999999999768150
Binary of +=0.003 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00300000000000011369          3.00    3.00    3.00    3.00810000000000021814
3.00600000000000022737          3.01    3.01    3.01    3.01110000000000033182
3.00900000000000034106          3.01    3.01    3.01    3.01410000000000044551
3.01200000000000045475          3.01    3.01    3.01    3.01710000000000055920
3.01500000000000056843          3.02    3.02    3.02    3.02010000000000067288
3.01800000000000068212          3.02    3.02    3.02    3.02310000000000078657
3.02100000000000079581          3.02    3.02    3.02    3.02610000000000090026
3.02400000000000090949          3.02    3.02    3.02    3.02910000000000101394
3.02700000000000102318          3.03    3.03    3.03    3.03210000000000112763
3.03000000000000113687          3.03    3.03    3.03    3.03510000000000124132
3.03300000000000125056          3.03    3.03    3.03    3.03810000000000135500
Binary of +=0.004 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00400000000000000355          3.00    3.00    3.00    3.00910000000000010800
3.00800000000000000711          3.01    3.01    3.01    3.01310000000000011156
3.01200000000000001066          3.01    3.01    3.01    3.01710000000000011511
3.01600000000000001421          3.02    3.02    3.02    3.02110000000000011866
3.02000000000000001776          3.02    3.02    3.02    3.02510000000000012221
3.02400000000000002132          3.02    3.02    3.02    3.02910000000000012577
3.02800000000000002487          3.03    3.03    3.03    3.03310000000000012932
3.03200000000000002842          3.03    3.03    3.03    3.03710000000000013287
3.03600000000000003197          3.04    3.04    3.04    3.04110000000000013642
3.04000000000000003553          3.04    3.04    3.04    3.04510000000000013998
3.04400000000000003908          3.04    3.04    3.04    3.04910000000000014353
Binary of +=0.005 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00499999999999989342         !3.00!   3.01    3.01    3.01009999999999999787
3.00999999999999978684          3.01    3.01    3.01    3.01509999999999989129
3.01499999999999968026         !3.01!   3.02    3.02    3.02009999999999978471
3.01999999999999957367          3.02    3.02    3.02    3.02509999999999967812
3.02499999999999946709         !3.02!   3.03    3.03    3.03009999999999957154
3.02999999999999936051          3.03    3.03    3.03    3.03509999999999946496
3.03499999999999925393         !3.03!   3.04    3.04    3.04009999999999935838
3.03999999999999914735          3.04    3.04    3.04    3.04509999999999925180
3.04499999999999904077         !3.04!   3.05    3.05    3.05009999999999914522
3.04999999999999893419          3.05    3.05    3.05    3.05509999999999903864
3.05499999999999882760         !3.05!   3.06    3.06    3.06009999999999893205
Binary of +=0.006 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00599999999999978328          3.01    3.01    3.01    3.01109999999999988773
3.01199999999999956657          3.01    3.01    3.01    3.01709999999999967102
3.01799999999999934985          3.02    3.02    3.02    3.02309999999999945430
3.02399999999999913314          3.02    3.02    3.02    3.02909999999999923759
3.02999999999999891642          3.03    3.03    3.03    3.03509999999999902087
3.03599999999999869971          3.04    3.04    3.04    3.04109999999999880416
3.04199999999999848299          3.04    3.04    3.04    3.04709999999999858744
3.04799999999999826628          3.05    3.05    3.05    3.05309999999999837073
3.05399999999999804956          3.05    3.05    3.05    3.05909999999999815401
3.05999999999999783284          3.06    3.06    3.06    3.06509999999999793729
3.06599999999999761613          3.07    3.07    3.07    3.07109999999999772058
Binary of +=0.007 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00700000000000011724          3.01    3.01    3.01    3.01210000000000022169
3.01400000000000023448          3.01    3.01    3.01    3.01910000000000033893
3.02100000000000035172          3.02    3.02    3.02    3.02610000000000045617
3.02800000000000046896          3.03    3.03    3.03    3.03310000000000057341
3.03500000000000058620          3.04    3.04    3.04    3.04010000000000069065
3.04200000000000070344          3.04    3.04    3.04    3.04710000000000080789
3.04900000000000082068          3.05    3.05    3.05    3.05410000000000092513
3.05600000000000093792          3.06    3.06    3.06    3.06110000000000104237
3.06300000000000105516          3.06    3.06    3.06    3.06810000000000115961
3.07000000000000117240          3.07    3.07    3.07    3.07510000000000127685
3.07700000000000128964          3.08    3.08    3.08    3.08210000000000139408
Binary of +=0.008 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00800000000000000711          3.01    3.01    3.01    3.01310000000000011156
3.01600000000000001421          3.02    3.02    3.02    3.02110000000000011866
3.02400000000000002132          3.02    3.02    3.02    3.02910000000000012577
3.03200000000000002842          3.03    3.03    3.03    3.03710000000000013287
3.04000000000000003553          3.04    3.04    3.04    3.04510000000000013998
3.04800000000000004263          3.05    3.05    3.05    3.05310000000000014708
3.05600000000000004974          3.06    3.06    3.06    3.06110000000000015419
3.06400000000000005684          3.06    3.06    3.06    3.06910000000000016129
3.07200000000000006395          3.07    3.07    3.07    3.07710000000000016840
3.08000000000000007105          3.08    3.08    3.08    3.08510000000000017550
3.08800000000000007816          3.09    3.09    3.09    3.09310000000000018261
Binary of +=0.009 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00899999999999989697          3.01    3.01    3.01    3.01410000000000000142
3.01799999999999979394          3.02    3.02    3.02    3.02309999999999989839
3.02699999999999969091          3.03    3.03    3.03    3.03209999999999979536
3.03599999999999958789          3.04    3.04    3.04    3.04109999999999969233
3.04499999999999948486         !3.04!   3.05    3.05    3.05009999999999958931
3.05399999999999938183          3.05    3.05    3.05    3.05909999999999948628
3.06299999999999927880          3.06    3.06    3.06    3.06809999999999938325
3.07199999999999917577          3.07    3.07    3.07    3.07709999999999928022
3.08099999999999907274          3.08    3.08    3.08    3.08609999999999917719
3.08999999999999896971          3.09    3.09    3.09    3.09509999999999907416
3.09899999999999886668          3.10    3.10    3.10    3.10409999999999897113
Binary of +=0.010 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.00999999999999978684          3.01    3.01    3.01    3.01509999999999989129
3.01999999999999957367          3.02    3.02    3.02    3.02509999999999967812
3.02999999999999936051          3.03    3.03    3.03    3.03509999999999946496
3.03999999999999914735          3.04    3.04    3.04    3.04509999999999925180
3.04999999999999893419          3.05    3.05    3.05    3.05509999999999903864
3.05999999999999872102          3.06    3.06    3.06    3.06509999999999882547
3.06999999999999850786          3.07    3.07    3.07    3.07509999999999861231
3.07999999999999829470          3.08    3.08    3.08    3.08509999999999839915
3.08999999999999808153          3.09    3.09    3.09    3.09509999999999818598
3.09999999999999786837          3.10    3.10    3.10    3.10509999999999797282
3.10999999999999765521          3.11    3.11    3.11    3.11509999999999775966
Binary of +=0.011 decimal       %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
3.00000000000000000000          3.00    3.00    3.00    3.00510000000000010445
3.01100000000000012079          3.01    3.01    3.01    3.01610000000000022524
3.02200000000000024158          3.02    3.02    3.02    3.02710000000000034603
3.03300000000000036238          3.03    3.03    3.03    3.03810000000000046683
3.04400000000000048317          3.04    3.04    3.04    3.04910000000000058762
3.05500000000000060396          3.06    3.06    3.06    3.06010000000000070841
3.06600000000000072475          3.07    3.07    3.07    3.07110000000000082920
3.07700000000000084555          3.08    3.08    3.08    3.08210000000000095000
3.08800000000000096634          3.09    3.09    3.09    3.09310000000000107079
3.09900000000000108713          3.10    3.10    3.10    3.10410000000000119158
3.11000000000000120792          3.11    3.11    3.11    3.11510000000000131237
3.12100000000000132871          3.12    3.12    3.12    3.12610000000000143316

simulate value of a half cent in binary.
Binary approx of decimal        %.2f    +.0001  trunc((dblTest+.0051)*100)*.01
8.99499999999999921840         !8.99!   9.00    9.00    9.00009999999999976694
9.00499999999999900524         !9.00!   9.01    9.01    9.01009999999999955378
9.01499999999999879208         !9.01!   9.02    9.02    9.02009999999999934062
9.02499999999999857891         !9.02!   9.03    9.03    9.03009999999999912745
9.03499999999999836575         !9.03!   9.04    9.04    9.04009999999999891429
9.04499999999999815259         !9.04!   9.05    9.05    9.05009999999999870113
9.05499999999999793943         !9.05!   9.06    9.06    9.06009999999999848797
9.06499999999999772626         !9.06!   9.07    9.07    9.07009999999999827480
9.07499999999999751310         !9.07!   9.08    9.08    9.08009999999999806164
9.08499999999999729994         !9.08!   9.09    9.09    9.09009999999999784848
9.09499999999999708677         !9.09!   9.10    9.10    9.10009999999999763531


 Use mouse to scroll and view from the top.
 A change to the window's Properties, Options, Buffer size may be required.

C:\Users\timot\Documents\Visual Studio 2019\Projects\sizeof_Data_Types\Debug\sizeof_Data_Types.exe (process 22260) exited with code 0.
Press any key to close this window . . .
